#!/bin/bash

MuteMode=0
SuperMuteMode=0
NoOverride=0
ZPE=0
Gibbs=0
GibbsCorr=0
Enthalpy=0
FoundFiles=0
Hartree=0
eV=0
kJmol=0
Stoic=0
Stoicnum=0
Prec=6
QH=0
extraarg=""
Temp=0
PrintUnit=0
Unit=kcal/mol
re='^[0-9]+([.][0-9]+)?$'
ReadNum=0


CheckEnding(){
if [ "$(head $1 | grep "Gaussian, Inc.")" ]; then
        if [ -z $(grep "Normal term" $1 | awk 'FNR==1{print $1}') ]; then
                if [ $MuteMode -eq 0 ]; then
                        printf "\nWarning: $1 didn't terminate right (or yet)!\n\n"
		elif [ $SuperMuteMode -eq 0 ]; then
                        printf "!"
                fi
                if [ $arg ]; then
                        if [ $MuteMode -eq 0 ]; then
                                printf "\nSecond warning: you can't ask for $arg in this case!\n"
			elif [ $SuperMuteMode -eq 0 ]; then
                                printf "X"
                        fi
                        exit
                fi
	fi
fi

	
}



if [ -z $1 ] || [ $1 == "-h" ]; then
        printf "\nDeltaE of Gaussian or ORCA output files. Use:\n\n"
	printf " DeltaE  [ output file(s) (incl. ext.) ]  [ Request(s) (optional) ]   (Order of output files is relevant!)\n\n"
        printf "Requests:\n\n"
        printf " [none]\t\t\t- DeltaE of last electronic energies (E) in kcal/mol. Only for number of output files N = 2\n"
        printf " -m/--mute\t\t- Mute mode: do not print errors, but symbols in case something goes wrong\n"
        printf " -M/--supermute\t\t- do not print errors NOR symbols in case something goes wrong (use it with caution!)\n\n"
	printf " -f/--prec\t\t- floating point precision\n\n"
        printf " -a/--hartree\t\t- print energy in Hartree\n"
        printf " -e/--eV\t\t\t- print energy in eV\n"
	printf " -J/--kJmol\t\t- print energy in kJ/mol\n"
        printf " -z/--zpe\t\t- use E + ZPE\n"
        printf " -H/--enthalpy\t\t- use enthalpy (E + H)\n"
        printf " -G/--gibbs\t\t- use Gibbs free energy (E + G_corr). Print an error if not available\n"
        printf " -c/--gcorr\t\t- use thermal correction to Gibbs free energy (G_corr)\n"
        printf " -q/--quasiharmonic\t- use quasi-harmonic Gibbs free energy. It needs goodvibes python package\n"
	printf " -C/--conc [float/int]\t- concentration correction in Molar. Default is 298.15K = 1.894... \n"
        printf " -T [integer]\t\t- (after -q) specifies temperature\n"
        printf " -s/--stoic [integers]\t- define stoichiometry. The number of intergers must be equivalent to N\n"
	printf " -A/--per-atom\t\t- calculate differences of atomic energies\n"
	printf " -d/--div [integer]\t- divide the result by that number\n"
	printf " -u/--print-unit\t- print unit after value\n"

        printf "\n"
	exit
fi


String=$(echo $*)


for i in $String; do
	if [ $ReadNum -eq 1 ]; then
		if ! [[ $i =~ $re ]]; then
			echo "Error: expected number after $option"
			exit
		else
			args+=($i)
			ReadNum=0
		fi

	elif [ $i == "-m" ]; then
                MuteMode=1
	elif [ $i == "-M" ]; then
		MuteMode=1
		SuperMuteMode=1
        elif [ $i == "-z" ] || [ $i == "--zpe" ]; then
		if [ $NoOverride -eq 1 ]; then
			echo "Error: clashing arguments"
			exit
		fi
		args+=($i)
		NoOverride=1
	elif [ $i == "-G" ] || [ $i == "-g" ] || [ $i == "--gibbs" ]; then
		if [ $NoOverride -eq 1 ]; then
                        echo "Error: clashing arguments"
                        exit
                fi
                args+=($i)
                NoOverride=1
	elif [ $i == "-c" ] || [ $i == "--gcorr" ]; then
		if [ $NoOverride -eq 1 ]; then
                        echo "Error: clashing arguments"
                        exit
                fi
                args+=($i)
                NoOverride=1
	elif [ $i == "-H" ] || [ $i == "--enthalphy" ]; then
		if [ $NoOverride -eq 1 ]; then
                        echo "Error: clashing arguments"
                        exit
                fi
                args+=($i)
                NoOverride=1
	elif [ $i == "-a" ] || [ $i == "--hartree" ]; then
		Unit=Hartree
		args+=($i)
		Prec=9
	elif [ $i == "-e" ] || [ $i == "--eV" ]; then
		Unit=eV
		args+=($i)
	elif [ $i == "-f" ] || [ $i == "--prec" ]; then
                args+=($i)
		option=$i
		ReadNum=1
	elif [ $i == "-J" ] || [ $i == "--kJmol" ]; then
		Unit=kJ/mol
                args+=($i)
	elif [ $i == "-s" ] || [ $i == "--stoic" ]; then
                Stoic=1
	elif [ $i == "-q" ] || [ $i == "--quasiharmonic" ]; then
		 if [ $NoOverride -eq 1 ]; then
                        echo "Error: clashing arguments"
                        exit
                fi
                args+=($i)
                NoOverride=1
	elif [ $(echo $i | grep "^[0-9]*") ] && [ $Stoic -eq 1 ]; then
		StoicValues+=("$i")
	elif [ $(echo $i | grep ".out\|.log") ] || [ $(echo $i | grep "OUTCAR") ]; then
		if [ ! -e $i ]; then
			echo "$i doesn't exist!"
			exit
		fi
		Files+=("$i")
	elif [ $i == "-T" ]; then
                args+=($i)
		option=$i
		ReadNum=1
        elif [ $i == "-A" ] || [ $i == "--per-atom" ]; then
		args+=($i)
	elif [ $i == "-d" ] || [ $i == "--div" ]; then
                args+=($i)
		option=$i
		ReadNum=1
	elif [ $i == "-u" ] || [ $i == "--print-unit" ]; then
                PrintUnit=1
	else
		echo "Can't understand $i"
		exit
        fi

	if [ $Stoic -eq 1 ] && ! [ $(echo $i | grep "^[0-9]*") ]; then
		Stoic=0
	fi
	
done

if [ $ReadNum -eq 1 ]; then
	echo "Error: expected number after $option"
	exit
fi

if [ ${#Files[@]} -eq 0 ]; then
	echo "Error: I need at least one file"
	exit
elif [ ${#Files[@]} -ge 3 ] && [ ${#StoicValues[@]} -eq 0 ]; then
	echo "Error: I need stoichiometry with 3 or more files"
	echo "Example:    DeltaE file1.out file2.out file3.out -Stoic 1 1 -2"
        exit
fi

if [ $Stoic -eq 1 ] && [ ${#StoicValues[@]} -eq 0 ]; then
	echo "Error: -Stoic needs some numbers after it"
	echo "Example:    DeltaE file1.out file2.out file3.out -Stoic 1 1 -2"
        exit
elif [ $Stoic -eq 1 ] && [ ${#Files[@]} -ne ${#StoicValues[@]} ]; then
	echo "Error: Stoichiometry values must respect the number of files"
	echo "Example:    DeltaE file1.out file2.out file3.out -Stoic 1 1 -2"
	exit
fi
	

for k in ${Files[@]}; do
	CheckEnding $k
	Energies+=("$(LastEnergy $k ${args[@]})")
done


if [ $Stoic -eq 0 ]; then
	if [ ${#Files[@]} -eq 1 ]; then
		printf -- "$(awk 'BEGIN{printf ( "%.'$Prec'f\n", '${Energies[0]}' )}')"
	else
		printf -- "$(awk 'BEGIN{printf ( "%.'$Prec'f\n", '${Energies[0]}' - '${Energies[1]}' )}')"
	fi
else
	TmpEnergy=0
	for n in $(seq 0 $((${#Energies[@]}-1))); do
		TmpEnergy=$(awk 'BEGIN{printf ( "%.'$Prec'f\n", '$TmpEnergy' + '${StoicValues[$n]}' * '${Energies[$n]}' )}')
	done
	printf -- "$TmpEnergy"
fi


if [ $PrintUnit -eq 1 ]; then
	echo " $Unit"
else
	echo ""
fi
