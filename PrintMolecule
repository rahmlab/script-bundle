#!/bin/bash

Xlim=20
scale=10
plane=xy
flip=0
Rotate=0
NoLabels=0
Colors=0
NoH=0
space="   "

# Reset
NC='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White
Grey='\033[2;30m'        # Grey


# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White
On_Grey='\033[2;47m'   # Grey

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White
On_IGrey='\033[2;107m'   # Grey


PrintHelp (){
	echo "PrintMolecule. -h for help (this message)"
	echo ""
	echo "Usage: PrintMolecule [Filename] [-s scale (optional)] [-p plane (optional)] [-r rotation (optional)] [ -v (optional) ] [ -H (optional) ] [ -L (optional) ]"
	printf "\tFilename: either a gaussian output file or a xyz file\n"
	printf "\tscale: an integer. Default = 10. Ideal range: 3-20\n"
	printf "\tplane: projection plane: xy, yz or xz. Default: xy.\n"
	printf "\trotation: angle rotation in degrees, anti-clockwise. Range: 0-180. Default: 0\n"
	printf "\t-v: vertial mirror flip\n"
	printf "\t-H: remove hydrogens\n"
	printf "\t-L: remove labels\n"
	printf "\t-c: color some of the atoms\n"
	printf "\n"
	exit
}

WriteAtomMatrix (){
	
	if [ "$(grep "Symmetry turned off" $File)" ]; then
	        line=$(awk '/Input orientation:/{ print NR+5}' $File | tail -n1)
	else
	        line=$(awk '/Standard orientation:/{ print NR+5}' $File | tail -n1) 
	fi

	if [ -z $line ]; then
		echo "Couldn't get matrix from file"
		exit
	fi

	atoms=$(awk '/NAtoms=/{print $2}' $File | head -1)

        awk 'FNR=='$line',FNR=='$line+$atoms-1'{print $2}' OFS='\t' $File  > atoms.oti.tmp
        
        if [ $(awk 'FNR=='$line-5',FNR=='$line'{print $0}' OFS='\t' $File | grep "Type" | awk '{print $1}') ]; then
                awk 'FNR=='$line',FNR=='$line+$atoms-1'{print $1,$4,$5,$6}' OFS='\t' $File > matrix.oti.tmp
        else    
                awk 'FNR=='$line',FNR=='$line+$atoms-1'{print $1,$3,$4,$5}' OFS='\t' $File > matrix.oti.tmp
        fi
        
        sed -i 's/31/Ga/g' atoms.oti.tmp
        sed -i 's/32/Ge/g' atoms.oti.tmp
        sed -i 's/33/As/g' atoms.oti.tmp
        sed -i 's/34/Se/g' atoms.oti.tmp
        sed -i 's/35/Br/g' atoms.oti.tmp
        sed -i 's/10/Ne/g' atoms.oti.tmp
        sed -i 's/11/Na/g' atoms.oti.tmp
        sed -i 's/12/Mg/g' atoms.oti.tmp
        sed -i 's/13/Al/g' atoms.oti.tmp
        sed -i 's/14/Si/g' atoms.oti.tmp
        sed -i 's/15/P/g' atoms.oti.tmp
        sed -i 's/16/S/g' atoms.oti.tmp
        sed -i 's/17/Cl/g' atoms.oti.tmp
        sed -i 's/18/Ar/g' atoms.oti.tmp
        sed -i 's/1/H/g' atoms.oti.tmp
        sed -i 's/2/He/g' atoms.oti.tmp
        sed -i 's/3/Li/g' atoms.oti.tmp
        sed -i 's/4/Be/g' atoms.oti.tmp
        sed -i 's/5/B/g' atoms.oti.tmp
        sed -i 's/6/C/g' atoms.oti.tmp
        sed -i 's/7/N/g' atoms.oti.tmp
        sed -i 's/8/O/g' atoms.oti.tmp
        sed -i 's/9/F/g' atoms.oti.tmp
        
	sed -i '1,9s/^/0/' matrix.oti.tmp
        paste atoms.oti.tmp matrix.oti.tmp | awk '{printf " %-3s %5s %15s %15s %15s\n", $1, $2, $3, $4, $5}' > xyzMatrix.tmp
        rm atoms.oti.tmp matrix.oti.tmp
}


if [ -z $1 ]; then
	echo "Give me a file. Should be an xyz, gaussian output file (.log) or whatever"
	PrintHelp
elif [ $1 == "-h" ]; then
	PrintHelp
fi


for i in $(seq 1 $#); do
        CurrStr=$(echo "$@" | awk '{print $'$i'}')
        FollowingStr=$(echo "$@" | awk '{print $('$i'+1)}')

        case $CurrStr in
		*.xyz)
			FileType=xyz
			File=$1 ;;
		*.log)
			if [ "$(grep "Gaussian, Inc.  All Rights Reserved" $1)" ]; then
                		FileType=GaussianLog
        		else
                		echo "Don't know what to do with this"
                		exit
        		fi
			File=$1 ;;
		-s)	
			if [ $FollowingStr -ge 1 ]; then
				scale=$FollowingStr
			else
				echo "Scaling factor must be grater than 0"
				exit
			fi ;;
		-p)	
			plane=$FollowingStr
			if [ $plane != "xy" ] && [ $plane != "yz" ] && [ $plane != "xz" ]; then
				echo "Error: planes can be xy, yz and xz"
				exit
			fi;;
		-r)
			rotation=$FollowingStr
			Rotate=1
			if [ -z $(echo $rotation | grep -e "^[0-9]" -e "^-[0-9]") ]; then
				echo "Error: rotation angle must be an integer"
				exit
			elif [ $rotation -eq 0 ]; then
				Rotate=0
			else
				rad=$(awk 'BEGIN{printf "%.3f\n", 3.1416 * '$rotation' / 180 }')
				cosA=$(awk 'BEGIN{printf "%.3f\n", cos('$rad')}')
				sinA=$(awk 'BEGIN{printf "%.3f\n", sin('$rad')}')
			fi;;
		-v)	flip=1;;
		-L)	NoLabels=1;;
		-H)	NoH=1;;
		-c)	Colors=1;;

	esac
done


case $FileType in

	xyz)
		NR=$(awk 'END{print NR}' $File)
		if [ -z "$(awk 'FNR=='$NR'{print $1}' $File)" ]; then
			NR=$((NR-1))
		fi
		sed -n '3,'$NR'p' $File > xyzMatrix.tmp
		NAtoms=$((NR-2))
		for num in $(seq 1 $NAtoms); do
			echo "$num" >> labels.tmp
		done
		sed -i '1,9s/^/0/' labels.tmp
		awk '{print $1}' xyzMatrix.tmp > atoms.tmp
		awk '{print $2,$3,$4}' xyzMatrix.tmp > xyzvalues.tmp
		paste atoms.tmp labels.tmp xyzvalues.tmp | awk '{printf " %-3s %5s %15s %15s %15s\n", $1, $2, $3, $4, $5}' > xyzMatrix.tmp
		rm labels.tmp atoms.tmp xyzvalues.tmp
		;;
	
	GaussianLog)
		WriteAtomMatrix		
		NAtoms=$atoms
		;;

esac


if [ $plane == "xy" ]; then
	awk '{print $3,$4}' xyzMatrix.tmp > XYvalues.tmp
elif [ $plane == "xz" ]; then
	awk '{print $3,$5}' xyzMatrix.tmp > XYvalues.tmp
elif [ $plane == "yz" ]; then
	awk '{print $4,$5}' xyzMatrix.tmp > XYvalues.tmp
fi



if [ $flip -eq 1 ]; then
	sort -k1n XYvalues.tmp > sorted_XYvalues.tmp      #sort matrix based on X values (ascending)

	minX=$(awk 'FNR==1{print $1}' sorted_XYvalues.tmp)
	maxX=$(awk 'END{print $1}' sorted_XYvalues.tmp)
	midX=$(awk 'BEGIN{printf "%.6f\n", '$minX' + ( ( '$maxX' - '$minX' ) / 2 )}')

	rm sorted_XYvalues.tmp

	for num in $(seq 1 $NAtoms); do
		X_old=$(awk 'FNR=='$num'{print $1}' XYvalues.tmp)
                X_new=$(awk 'BEGIN{printf "%.4f\n",  2*'$midX' - '$X_old' }')
		Y_old=$(awk 'FNR=='$num'{print $2}' XYvalues.tmp)
		printf -- "$X_new\t$Y_old\n" >> new_XYvalues.tmp
	done
	mv new_XYvalues.tmp XYvalues.tmp
fi

if [ $Rotate -eq 1 ]; then
	for num in $(seq 1 $NAtoms); do
		X_old=$(awk 'FNR=='$num'{print $1}' XYvalues.tmp)
		Y_old=$(awk 'FNR=='$num'{print $2}' XYvalues.tmp)
		X_new=$(awk 'BEGIN{printf "%.4f\n", '$X_old' * '$cosA' - '$Y_old' * '$sinA' }')
		Y_new=$(awk 'BEGIN{printf "%.4f\n", '$X_old' * '$sinA' + '$Y_old' * '$cosA' }')
		printf -- "$X_new\t$Y_new\n" >> new_XYvalues.tmp
	done
	mv new_XYvalues.tmp XYvalues.tmp
fi


ScaleFact=$(awk 'BEGIN{printf "%.2f\n", '$scale' / 5 }')

awk '{print $1$2}' xyzMatrix.tmp > symbols.tmp
awk '{printf "%.0f\n", $1 * '$ScaleFact'}' XYvalues.tmp > Xvalues.tmp
awk '{printf "%.0f\n", $2 * '$ScaleFact'}' XYvalues.tmp > Yvalues.tmp

paste symbols.tmp Xvalues.tmp Yvalues.tmp > scaled_XYMatrix.tmp

rm symbols.tmp Xvalues.tmp Yvalues.tmp XYvalues.tmp xyzMatrix.tmp

sort -k3rn -k2n scaled_XYMatrix.tmp > sorted_XYMatrix.tmp      #sort matrix based on y values (descending) and the x values (ascending)

minX=$(sort -k2n scaled_XYMatrix.tmp | awk '{print $2}' | head -1)
maxX=$(sort -k2n scaled_XYMatrix.tmp | awk '{print $2}' | tail -1)
width=$(echo $" $(echo ${maxX#-}) + $(echo ${minX#-}) " | bc)


rm scaled_XYMatrix.tmp

col=$(stty size | cut -d" " -f2)
col=$((col/3))

minX=$(( minX - (col- width)/2 ))

if [ $width -ge $col ]; then
	echo "Error: too large scaling factor"
	exit
fi

if [ $NoH -eq 1 ]; then
	sed -i '/^H/d' sorted_XYMatrix.tmp
	NAtoms=$(awk 'END{print NR}' sorted_XYMatrix.tmp)
fi

matfile=sorted_XYMatrix.tmp


for i in $(seq 1 $NAtoms); do
	Symbol[$i]=$(awk 'FNR=='$i'{print $1}' $matfile)
	X_values[$i]=$(awk 'FNR=='$i'{print $2}' $matfile)
	Y_values[$i]=$(awk 'FNR=='$i'{print $3}' $matfile)
	if [ $Colors -eq 1 ]; then 
		case ${Symbol[$i]} in
			N[0-9]*) Color[$i]=$On_IBlue;;
			#H[0-9]*) Color[$i]="$Grey"$On_IGrey;;
			C[0-9]*) Color[$i]="$Black"$On_White;;
		esac
	fi
done

if [ $NoLabels -eq 1 ]; then
	space="  "
	for i in $(seq 1 $NAtoms); do
		Symbol[$i]=$(echo "${Symbol[$i]}" | tr -d '0123456789')
	done
fi

maxY=${Y_values[1]}
minY=${Y_values[$NAtoms]}


echo "Molecule structure:"

currline=$((maxY+3))
currspace=0


for n in $(seq 1 $NAtoms); do
	currY=${Y_values[$n]}	
	currX=${X_values[$n]}

	linediff=$((currline - currY))
	
	if [ $linediff -ne 0 ]; then
		currspace=0
	fi
	
	spacediff=$((currX - minX - currspace))
	

	for lines in $(seq 1 $linediff); do
		echo ""
	done
	for spaces in $(seq 2 $spacediff); do
		printf "$space"
	done
	printf "${Color[$n]}${Symbol[$n]}${NC}"

	currspace=$((currX - minX))
	currline=$currY

done


linediff=3
#linediff=$((currY + 10))

for lines in $(seq 1 $linediff); do
                echo ""
done


printf "\n"
echo "-----------------------------------------------------------------------"

rm sorted_XYMatrix.tmp 

